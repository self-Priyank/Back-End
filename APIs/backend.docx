1. back-end: connects front-end & database
@ takes request from front-end, interacts with database to fetch or update data & send it back to user after processing

2. API: Application Programming Interface = part of back-end that connects front-end & back-end server
@ takes valid request from front-end, send it to server, format response and sends back to front-end in JSON
* response = output data + status code = use json() to convert it into dict for easy access

3. API structure:
@ URL: used by client to send request to API
@ endpoint = specific URL path that calls a specific API func
--> API can have multiple endpoints for different funcs
@ HTTP methods: perform specific actions on endpoint
--> GET = retrieve data, POST = create new data, PUT = update existing data, DELETE = remove data 
@ request header: carries metadata regarding request. helps API to process it correctly
--> metadata = descriptive info. like authentication cred., content type, etc. 
@ request body: data send to API in JSON. mainly used with POST & PUT

4. Library: set of pre-written codes (functions, classes, etc) that you can call anytime, anywhere in program
5. Framework: provides pre-defined structure with built-in tools for creating applications
--> controls the flow of program & user add its code in this setup 

6. pydantic: library that helps to validate data based on data model
@ BaseModel = main class for creating data model

7. FastAPI: python-based framework used for building high-performance API quickly & efficiently
@ prefer over Django when you're creating high-speed back-end only. python library = fastapi
@ FastAPI = main class of fastapi used to create app
@ uvicorn = lightweight, high-speed web server for running FastAPI app

8. Django: python-based framework used to build full websites (from front-end to back-end) by following MVT pattern